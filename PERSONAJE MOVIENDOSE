#include "MyForm.h"

using namespace Project4;

int main() {
	Application::Run(gcnew MyForm());
	return 0;
}




#pragma once
using namespace System::Drawing;

class Hero {
private:
	int x, y; //ubicaciones
	int dx, dy; //movimientos
	int idX, idY; //indice
	int width, height;
public:
	Hero(int width, int height) {
		this->width = width;
		this->height = height;
		dx = dy = 15;
		x = 70;
		y = 70;
		idX = idY = 0;
	}
	~Hero(){}
	void draw(Graphics^ g, Bitmap^ bmp) {
		Rectangle sectionShown = Rectangle(idX * width, idY * height, width, height);
		Rectangle zoom = Rectangle(x, y, width * 1.0, height * 1.0);
		g->DrawImage(bmp, zoom, sectionShown, GraphicsUnit::Pixel);
	}

	void move(Graphics^ g, char i) {
		switch (i) {
		case 'A':
				if (x > 0) {
					idY = 1;
					x -= dx;
				}
				break;
		case 'D':
			if (x + width * 1.0 < g->VisibleClipBounds.Width) {
				idY = 2;
				x += dx;
			}
			break;
		case 'W':
			if (y > 0) {
				idY = 3;
				y -= dy;
			}
			break;
		case 'S':
			if (y + height * 1.0 < g->VisibleClipBounds.Height) {
				idY = 0;
				y += dy;
			}
			break;
		}
		idX++;
		if (idX > 3)idX = 0;
	}
};




#pragma once
using namespace System::Drawing;

class Enemy {
private:
	int x, y; //ubicaciones
	int dx, dy; //movimientos
	int idX, idY; //indice
	int width, height;
	int direction;
public:
	Enemy(int width, int height, int direction) {
		this->direction = direction;
		this->width = width;
		this->height = height;
		dx = dy = 20;
		x = 400;
		y = 200;
		idX = idY = 0;
	}
	~Enemy() {}
	void draw(Graphics^ g, Bitmap^ bmp) {
		Rectangle sectionShown = Rectangle(idX * width, idY * height, width, height);
		Rectangle zoom = Rectangle(x, y, width * 1.0, height * 1.0);
		g->DrawImage(bmp, zoom, sectionShown, GraphicsUnit::Pixel);
	}

	void move(Graphics^ g) {
		if (direction == 1) {
			if (x + width * 1.0 > g->VisibleClipBounds.Width || x < 0)dx *= -1;
			if (dx > 0) idY = 2;
			else idY = 1;
			x += dx;
		}
		else {
			if (y + height * 1.0 > g->VisibleClipBounds.Height || y < 0)dy *= -1;
			if (dy > 0) idY = 0;
			else idY = 3;
			y += dy;
		}
		idX++;
		if (idX > 3)idX = 0;
	}
};



#pragma once
#include"Hero.h"
#include"Enemy.h"

namespace Project4 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			g = pnlCanvas->CreateGraphics();
			//g=this->CreateGaphics();
			space = BufferedGraphicsManager::Current;
			buffer = space->Allocate(g, pnlCanvas->ClientRectangle);
			bmpHero = gcnew Bitmap("rojo.png");
			bmpMap = gcnew Bitmap("fondo.png");
			bmpEnemy = gcnew Bitmap("bruno.png");
			hero = new Hero(bmpHero->Width / 4, bmpHero->Height / 4);
			enemyH = new Enemy(bmpEnemy->Width / 4, bmpEnemy->Height / 4, 1);
			enemyV = new Enemy(bmpEnemy->Width / 4, bmpEnemy->Height / 4, 2);
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Timer^ timer1;
	protected:
	private: System::Windows::Forms::Panel^ pnlCanvas;
	private: System::ComponentModel::IContainer^ components;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		Graphics^ g;
		//Se reserva un espacio para el buffer
		BufferedGraphicsContext^ space;
		//Variable paa poder crear un canvas dentro de espaco del buffer
		//utlizando el canvas del formulario
		BufferedGraphics^ buffer;
		Bitmap^ bmpHero;
		Bitmap^ bmpMap;
		Bitmap^ bmpEnemy;
		Hero* hero;
		Enemy* enemyH;
		Enemy* enemyV;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			this->timer1 = (gcnew System::Windows::Forms::Timer(this->components));
			this->pnlCanvas = (gcnew System::Windows::Forms::Panel());
			this->SuspendLayout();
			// 
			// timer1
			// 
			this->timer1->Enabled = true;
			this->timer1->Tick += gcnew System::EventHandler(this, &MyForm::timer1_Tick);
			// 
			// pnlCanvas
			// 
			this->pnlCanvas->Location = System::Drawing::Point(12, 12);
			this->pnlCanvas->Name = L"pnlCanvas";
			this->pnlCanvas->Size = System::Drawing::Size(1054, 527);
			this->pnlCanvas->TabIndex = 0;
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1066, 543);
			this->Controls->Add(this->pnlCanvas);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MyForm::MyForm_KeyDown);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: System::Void MyForm_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
		switch (e->KeyCode) {
		case Keys::A:
			hero->move(buffer->Graphics, 'A'); break;
		case Keys::S:
			hero->move(buffer->Graphics, 'S'); break;
		case Keys::D:
			hero->move(buffer->Graphics, 'D'); break;
		case Keys::W:
			hero->move(buffer->Graphics, 'W'); break;
		}
	}
	private: System::Void timer1_Tick(System::Object^ sender, System::EventArgs^ e) {
		//CLEAR
		buffer->Graphics->Clear(Color::White);
		//move
		enemyH->move(buffer->Graphics);
		enemyV->move(buffer->Graphics);
		//Draw
		buffer->Graphics->DrawImage(bmpMap, 0, 0, bmpMap->Width * 3.0, bmpMap->Height * 2.0);
		hero->draw(buffer->Graphics, bmpHero);
		enemyH->draw(buffer->Graphics, bmpEnemy);
		enemyV->draw(buffer->Graphics, bmpEnemy);
		//render
		buffer->Render(g);
	}
};
}
