#include "pch.h"
#include"ArrEmployee.h"
#include"iostream"
using namespace System;

void menu() {
    cout << "\n1.- Agregar empleado";
    cout << "\n2.- Emplados nacidos en Abril";
    cout << "\n3.- Cantidad de empleados contrtados en Marzo de 2017";
    cout << "\n4.- Lista de todos los empleados";
}

int main()
{
    int option;
    string name, lastName;
    int day, month, year;
    Date b;
    Date h;
    ArrEmployee* arr = new ArrEmployee();
    Employee* e;
    while (1) {
        menu();
        do {
            cout << "\nIngresar opci" << char(162) << "n: ";
            cin >> option;
        } while (option < 1 || option>4);
        switch (option) {
        case 1:
            cout << "\nNombre del empleado: "; cin >> name;
            cout << "\nApellido del empleado: "; cin >> lastName;
            do {
                cout << "\nDia de nacimiento: "; cin >> day;
                cout << "\nMes de nacimiento: "; cin >> month;
                cout << "\nAnio de nacimiento: "; cin >> year;
                b = Date(day, month, year);
            } while (!b.dateIsReal()); //b.dateIsRal()=false

            do {
                cout << "\nDia de contratacion: "; cin >> day;
                cout << "\nMes de contratacion: "; cin >> month;
                cout << "\nAnio de contratacion: "; cin >> year;
                h = Date(day, month, year);
            } while (!h.dateIsReal()); //h.dateIsRal()=false
            e = new Employee(name, lastName, b, h);
            //agregamos un empleado a la clase arreglo
            arr->addEmployee(e);
            cout << "\nEmpleado agregado...";
            break;
        case 2:
            arr->employeeBornApril(); break;
        case 3:
            cout << "\nNumero de empleados contratados en Marzo 2017: " << arr->employeeMarch2017();
        case 4:
            arr->listAll(); break;
        }
        getch();
        Console::Clear();
    } 
    return 0;
}








#pragma once
#include <string>
#include <iostream>
#include <conio.h>

using namespace std;
string months[12] = { "Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Ocubre","Noviembre","Diciembre" };

class Date {
private:
	int day;
	int month;
	int year;
public:
	Date() {}
	Date(int d, int m, int y) {
		day = d;
		month = m;
		year = y;
	}
	~Date(){}
	void setDay(int v) { day = v; }
	void setMonth(int v) { month = v; }
	void setYear(int v) { year = v; }
	int getDay() { return day; }
	int getMonth() { return month; }
	int getYear() { return year; }

	string getDate() {
		string s;
		s.append(to_string(day));
		s.append("/");
		s.append(to_string(month));
		s.append("/");
		s.append(to_string(year));   //DD/MM/YY
		return s;
	}

	void monthLetters() {
		//7 de setiembre, 2020
		cout << day << "de" << months[month - 1] << ", " << year << "\n";
	}

	//aÃ±o bisieso tiene que sr multiplo de 4
	//anios que son multiplos de 100 no son bisiestos, a menos que sean multiplos de 100 y a la vez multiplos de 400

	bool leapYear() {
		if (year %4 == 0 && (year % 100 != 0 || year % 400 == 0))
			return true;
		else return false;
	}

	bool dateIsReal() {
		if (month > 1 && month <= 12) {
			switch (month) {
			case 1: case 3: case 5: case 7: case 8: case 10: case 12:
				if (day >= 1 && day <= 31)
					return true;
				else return false;
				break;
			case 4: case 6: case 9: case 11:
				if (day >= 1 && day <= 30)
					return true;
				else return false;
				break;
			case 2:
				if (leapYear()) {//leapyear()==true
					if (day >= 1 && day <= 29)
						return true;
					else return false;
				}
				else {
					if (day >= 1 && day <= 28)
						return true;
					else return false;
				}
			}
		}
		else return false;
	}
};







#pragma once
#include "Date.h";

class Employee {
private:
	string name;
	string lastName;
	Date birthDate;
	Date hiringDate;
public:
	Employee(string n, string l, Date b, Date h) {
		name = n;
		lastName = l;
		birthDate = b;
		hiringDate = h;
	}
	int getBirthMonth() { return birthDate.getMonth(); }
	int getHiringMonth() { return hiringDate.getMonth(); }
	int getHiringYear() { return hiringDate.getYear(); }

	void printData() {
		cout << "\nName: " << name;
		cout << "\nLast Name: " << lastName;
		cout << "\nBirthDate: " << birthDate.getDate();
		cout << "\nHiringDate: " << hiringDate.getDate();
	}
};










#pragma once
#include <vector> //utilizar contenedores
#include "Employee.h"
class ArrEmployee {
private:
	vector<Employee*> arreglo; //arreglo con vector
public:
	ArrEmployee() {}
	~ArrEmployee(){}
	void addEmployee(Employee* obj) {
		arreglo.push_back(obj);
	}

	void listAll() {
		for (int i = 0; i < arreglo.size(); i++)
			arreglo[i]->printData();
	}

	void employeeBornApril() {
		for (int i = 0; i < arreglo.size(); i++)
		{
			if(arreglo[i]->getBirthMonth()==4)
			arreglo[i]->printData();
		}
	}

	int employeeMarch2017() {
		int cont = 0;
		for (int i = 0; i < arreglo.size(); i++)
		{
			if (arreglo[i]->getHiringMonth() == 3 && arreglo[i]->getHiringYear() == 2017)
				cont++;
		}
		return cont;
	}

};
