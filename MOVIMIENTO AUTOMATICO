#pragma once
#include "Controller.h"
#include <ctime>
namespace Project8 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			srand(time(NULL));
			g = panel1->CreateGraphics();
			space = BufferedGraphicsManager::Current;
			buffer = space->Allocate(g, panel1->ClientRectangle);
			bmpCar = gcnew Bitmap("rojo.png");
			bmpEnemy = gcnew Bitmap("proton.png");
			bmpMap = gcnew Bitmap("fondo.png");
			controller = new Controller(bmpCar, bmpEnemy);
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Panel^ panel1;
	protected:
	private: System::Windows::Forms::Timer^ timer1;
	private: System::ComponentModel::IContainer^ components;

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		Graphics^ g;
		BufferedGraphicsContext^ space;
		BufferedGraphics^ buffer;
		Bitmap^ bmpCar;
		Bitmap^ bmpEnemy;
		Bitmap^ bmpMap;
		Controller* controller;


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->components = (gcnew System::ComponentModel::Container());
			this->panel1 = (gcnew System::Windows::Forms::Panel());
			this->timer1 = (gcnew System::Windows::Forms::Timer(this->components));
			this->SuspendLayout();
			// 
			// panel1
			// 
			this->panel1->Location = System::Drawing::Point(-1, -1);
			this->panel1->Name = L"panel1";
			this->panel1->Size = System::Drawing::Size(908, 481);
			this->panel1->TabIndex = 0;
			// 
			// timer1
			// 
			this->timer1->Enabled = true;
			this->timer1->Tick += gcnew System::EventHandler(this, &MyForm::timer1_Tick);
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(907, 477);
			this->Controls->Add(this->panel1);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MyForm::MyForm_KeyDown);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: System::Void timer1_Tick(System::Object^ sender, System::EventArgs^ e) {
		//clear
		buffer->Graphics->Clear(Color::WhiteSmoke);
		//collision
		controller->collision();
		//move para el personaje se hara con teclas
		controller->moveEverything(buffer->Graphics);
		//draw
		buffer->Graphics->DrawImage(bmpMap, 0, 0, bmpMap->Width * 2.2, bmpMap->Height * 1.6);
		controller->drawEverything(buffer->Graphics, bmpCar, bmpEnemy);
		if (controller->getEnemies().size() == 3)
			bmpCar = gcnew Bitmap("bruno.png");
		//Render
		buffer->Render(g);
	}
	private: System::Void MyForm_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
		switch (e->KeyCode) {
		case Keys::Escape:
			this->Close();
		}
	}
	};
}


#include "MyForm.h"


#pragma once
#include <iostream>
using namespace std;
using namespace System::Drawing;

class Enemy {
private:
	int x, y;
	int dx, dy;
	int idX, idY;
	int width, height;
	int index;
	bool visible;
public:
	Enemy(int width, int height) {
		this->width = width;
		this->height = height;
		dx = dy = 5;
		x = 5 * (rand() % 140);
		y = 5 * (rand() % 60);
		idX = idY = 0;
		visible = true;
		index = rand() % 3;
	}

	~Enemy() {}

	void draw(Graphics^ g, Bitmap^ bmp) {
		Rectangle sectionShow = Rectangle(idX * width, idY * height, width, height);
		Rectangle zoom = Rectangle(x, y, width, height);
		g->DrawImage(bmp, zoom, sectionShow, GraphicsUnit::Pixel);
	}

	void move(Graphics^ g) {
		int i = rand() % 4;
		switch (index){
		case 0:
			//left
			if (i = 0 && x >= 0) {
				x -= dx;
				idY = 1;
			}
			//Right
			if (i == 1 && x + width * 1.0 <= g->VisibleClipBounds.Width) {
				x += dx;
				idY = 2;
			}
			//Up
			if (i == 2 && y >= 0) {
				y -= dy;
				idY = 3;
			}
			//Down
			if (i == 3 && y + height * 1.0 <= g->VisibleClipBounds.Height) {
				y += dy;
				idY = 0;
			}
			break;
		case 1://HORIZONTAL
			if (x + width * 1.0 > g->VisibleClipBounds.Width || x < 0) dx *= -1;
			if (dx > 0) { //dx=20
				idY = 2;
			}
			else // dx=-20
				idY = 1;
			x += dx;
			break;

		case 2://VERTICAL
			if (y + height * 1.0 > g->VisibleClipBounds.Height || y < 0) dy *= -1;

			if (dy > 0) {
				idY = 0;
			}
			else
				idY = 3;
			y += dy;
		}
		idX++;
		if (idX > 3)
			idX = 0;
	}
	int getX() { return x; }
	int getY() { return y; }
	Rectangle getRectangle() {
		return Rectangle(x, y, width * 1.0, height * 1.0);
	}

	void setVisible(bool v) { visible = v; }
	bool getVisible() { return visible; }

};


#pragma once
#include "Car.h"
#include <vector>
class Controller {
private:
	vector<Enemy*>enemies;
	Car* c;
public:
	Controller(Bitmap^ bmpCar, Bitmap^ bmpEnemy) {
		for (int i = 0; i < 6; i++)
			enemies.push_back(new Enemy(bmpEnemy->Width / 4, bmpEnemy->Height / 4));
		c = new Car(bmpCar->Width / 4, bmpCar->Height / 4);
	}
	~Controller(){}
	void drawEverything(Graphics^ g, Bitmap^ bmpCar, Bitmap^ bmpEnemy) {
		for (int i = 0; i < enemies.size(); i++)
			enemies[i]->draw(g, bmpEnemy);
		c->draw(g, bmpCar);
	}

	void moveEverything(Graphics^ g) {
		for (int i = 0; i < enemies.size(); i++)
			enemies[i]->move(g);
		if (enemies.size() > 0)
			c->move(enemies[0]);
	}

	void collision() {
		//verificacion
		if (enemies.size() > 0) {
			if (c->getRectangle().IntersectsWith(enemies[0]->getRectangle()))
				enemies[0]->setVisible(false);
		}
		//eliminacion
		for (int i = 0; i < enemies.size(); i++) {
			if (!enemies[i]->getVisible())
				enemies.erase(enemies.begin() + i);
		}
	}
	vector<Enemy*> getEnemies() { return enemies; }

};




#pragma once
#include"Enemy.h"
using namespace System::Drawing;
class Car {
	int x, y;
	int dx, dy;
	int idX, idY;
	int width, height;
public:
	Car(int width, int height) {
		this->width = width;
		this->height = height;
		dx = dy = 5;
		x = 70;
		y = 70;
		idX = idY = 0;
	}
	~Car(){}
	void draw(Graphics^ g, Bitmap^ bmpCar) {
		Rectangle sectionShow = Rectangle(idX * width, idY * height, width, height);
		Rectangle zoom = Rectangle(x, y, width * 1.0, height * 1.0);
		g->DrawImage(bmpCar, zoom, sectionShow, GraphicsUnit::Pixel);
	}

	void move(Enemy* e) {
		if (e->getVisible()) {
			if (x == e->getX())
				x += 0;
			else if (x > e->getX()) {
				x -= dx;
				idY = 1;
			}
			else if (x < e->getX()) {
				x += dx;
				idY = 2;
			}
			if (y == e->getY())
				y + 0;
			else if (y > e->getY()) {
				y -= dy;
				idY = 3;
			}
			else if (y < e->getY()) {
				y += dy;
				idY = 0;
			}
			idX++;
			if (idX > 3)idX = 0;
		}
	}
	Rectangle getRectangle() {
		return Rectangle(x, y, width * 1.0, height * 1.0);
	}
};



#pragma once
#include "MyForm.h"
namespace Project8 {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Summary for MyFormStart
	/// </summary>
	public ref class MyFormStart : public System::Windows::Forms::Form
	{
	public:
		MyFormStart(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MyFormStart()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::Label^ label1;
	private: System::Windows::Forms::Button^ button1;
	protected:

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(105, 61);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(76, 13);
			this->label1->TabIndex = 0;
			this->label1->Text = L"VIDEOJUEGO";
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(70, 121);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(148, 77);
			this->button1->TabIndex = 1;
			this->button1->Text = L"JUGAR AHORA!!!";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &MyFormStart::button1_Click);
			// 
			// MyFormStart
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(284, 261);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->label1);
			this->Name = L"MyFormStart";
			this->Text = L"MyFormStart";
			this->Load += gcnew System::EventHandler(this, &MyFormStart::MyFormStart_Load);
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion
	private: System::Void MyFormStart_Load(System::Object^ sender, System::EventArgs^ e) {
	}
	private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) {
		MyForm^ frm = gcnew MyForm();
		frm->Show();
	}
	};
}



#include "MyFormStart.h"
using namespace Project8;
int main() {
	Application::Run(gcnew MyFormStart());
	return 0;
}
